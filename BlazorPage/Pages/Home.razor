@page "/"

<PageTitle>Home</PageTitle>
@using OpenApiToModels.Lib.OpenApi
@using OpenApiToModels.Lib.Serialisation
@using System.Text
@using Microsoft.OpenApi
@inject HttpClient Http

<div class="nav-box dark4">
    <nav class="nav-right">
        @if (IsGenerating)
        {
            <button class="button green disabled" id="btncompile">Working ▶</button>
            <div class="loadingspinner"></div>
        }
        else
        {
            <button class="button green " @onclick="Generate" id="btncompile">Generate ▶</button>
        }
        <input type="text" class="input-text" @bind="MatchingConfig.Matcher"/>
        <InputSelect class="input-text" @bind-Value="@MatchingConfig.Mode">
            @foreach (var value in Enum.GetValues<MatchingConfig.MatchMode>())
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
        <InputSelect class="input-text" @bind-Value="@Config.Tab">
            @foreach (var value in Enum.GetValues<ApiSerializerConfig.TabSymbol>())
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
        <div class="label">
            <label>Capitalize</label><input class="toggle" type="checkbox" @bind="Config.IsCamelCase"/>
        </div>
        <div class="label">
            <label>EnumValues</label><input class="toggle" type="checkbox" @bind="Config.IsEnumsInlinedActive"/>
        </div>
        <div class="label">
            <label>EnumAsString</label><input class="toggle" type="checkbox" @bind="Config.IsEnumAsStringOrInt"/>
        </div>
        <div class="label">
            <label>NoLines</label><input class="toggle" type="checkbox" @bind="Config.IsNoNewlines"/>
        </div>
        <div class="label">
            <label>WrapTags</label><input class="toggle" type="checkbox" @bind="Config.IsWrappingEnabled"/>
        </div>
        <div class="label">
            <label>JsonTags</label><input class="toggle" type="checkbox" @bind="Config.IsJsonPropertyNameTagsEnabled"/>
        </div>
        <div class="label">
            <label>Readonly</label><input class="toggle" type="checkbox" @bind="IsReadonlyList"/>
        </div>
        <div class="label">
            <label>Records</label><input class="toggle" type="checkbox" @bind="IsRecord"/>
        </div>
        <div class="label">
            <label>Examples</label><input class="toggle" type="checkbox" @bind="Config.IsExamplesActive"/>
        </div>
        <div class="label">
            <label>Comments</label><input class="toggle" type="checkbox" @bind="Config.IsCommentsActive"/>
        </div>
        <button class="button" @onclick="BtnImportFile">Example Data</button>
        <button class="button" @onclick="BtnToggleFormat">Toggle</button>
        <label class="button">Upload Json/Yaml<InputFile OnChange="BtnSingleUpload"/></label>
    </nav>
</div>

<div class="container">
    <StandaloneCodeEditor @ref="_editorLeft" CssClass="editor" Id="editor-left" ConstructionOptions="e => EditorConstructionOptions(e, true)"/>
    <StandaloneCodeEditor @ref="_editorRight" CssClass="editor" Id="editor-right" ConstructionOptions="e => EditorConstructionOptions(e, false)"/>
</div>

@code {

    // monaco editor setup
    private StandaloneCodeEditor _editorLeft = null!;
    private StandaloneCodeEditor _editorRight = null!;

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor, bool isLeft)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = isLeft ? "yaml" : "csharp",
            GlyphMargin = false,
            LineNumbers = "off",
            Folding = false,
            LineDecorationsWidth = 0,
            LineNumbersMinChars = 0,
            Value = "",
            Minimap = new EditorMinimapOptions
            {
                Enabled = false,
            },
            ScrollBeyondLastLine = false,
            Theme = "vs", // default "ace"
        };
    }

    // other setup
    private ApiSerializerConfig Config { get; set; } = new() { IsNoNewlines = true };
    private MatchingConfig MatchingConfig { get; set; } = new();
    private bool IsRecord { get; set; } = true;
    private bool IsReadonlyList { get; set; } = false;
    private bool IsGenerating { get; set; } = false;


    private async Task Generate()
    {
        IsGenerating = true;
        await Task.Delay(1);

        Config.DefaultClassName = IsRecord ? "public record " : "public class ";
        Config.List = IsReadonlyList ? "IReadonlyList<" : "List<";

        try
        {
            var (openApiDocument, diagnostic) = OpenApi.LoadFromText(await _editorLeft.GetValue());
            openApiDocument.ResolveReferences();
            var schemata = MatchingConfig.Mode switch
            {
                MatchingConfig.MatchMode.Everything =>
                    openApiDocument.Components.Schemas.Select(s => s.Value),
                MatchingConfig.MatchMode.Path =>
                    openApiDocument.SearchOperationsMatching(MatchingConfig.Matcher).CollectWithDependencies(),
                MatchingConfig.MatchMode.Classname =>
                    openApiDocument.SearchSchemataMatching(MatchingConfig.Matcher).CollectWithDependencies(),
                _ => throw new ArgumentOutOfRangeException(),
            };
            var orderModelsTxt = ApiSerializer.Serialize(schemata, diagnostic, Config);

            await _editorRight.SetValue(orderModelsTxt);
        }
        catch (Exception e)
        {
            throw;
        }
        finally
        {
            IsGenerating = false;
            await Task.Delay(1);
            StateHasChanged();
        }
    }

    private async Task BtnSingleUpload(InputFileChangeEventArgs arg)
    {
        MemoryStream ms = new MemoryStream();
        await arg.File.OpenReadStream(maxAllowedSize: 51200000L).CopyToAsync(ms);
        await _editorLeft.SetValue(Encoding.UTF8.GetString(ms.ToArray()));
    }

    private async Task BtnImportFile()
    {
        var str = await Http.GetStringAsync("sample-data/sample.yaml");
        await _editorLeft.SetValue(str);
    }

    private async Task BtnToggleFormat()
    {
        var val = await _editorLeft.GetValue();
        var (openApiDocument, diagnostic) = OpenApi.LoadFromText(val);
        if (val.TrimStart().FirstOrDefault() == '{')
            await _editorLeft.SetValue(
                openApiDocument.SerializeSpecificationDocument_YamlOrJson(diagnostic, OpenApiFormat.Yaml));
        else

            await _editorLeft.SetValue(
                openApiDocument.SerializeSpecificationDocument_YamlOrJson(diagnostic, OpenApiFormat.Json));
    }

}

<style>
.loadingspinner {
	pointer-events: none;
	width: 2.5em;
	height: 2.5em;
	border: 0.4em solid transparent;
	border-color: #eee;
	border-top-color: #987171;
	border-radius: 50%;
	animation: loadingspin 1s linear infinite;
}

@@keyframes loadingspin {
	100% {
			transform: rotate(360deg)
	}
}
body {
	height: 100vh;
	margin: 0;
	padding: 0;
	display: flex;
	justify-content: center;
	align-items: center;
}

.input-text{
    min-height: 32px;
}
input[type="file"] {
    display: none;
}
.label{
    display: flex;
    flex-flow: column wrap;
    align-items: center;
}
/*text boxes:*/
.container {
    padding: 0;
    display: flex;
    height: 100%;
    width: 100%;
    max-width: 100%;
}
@@media (max-width: 841px) {
    .container {
        flex-direction: column;
        align-items: baseline;
    }
}
/* CHECKBOX STYLING */
.editor {
    resize: none;
    flex: 1 1 auto;
    flex-grow: 1;
    border: 1px solid #ccc;
    padding: 10px;
    font-size: 16px;
    box-sizing: border-box;
    height: 100%;
    width: 100%;
}
#editor-left {
    margin-right: 5px;
    min-height: 860px;
}
#editor-right {
    min-height: 860px;
    margin-left: 5px;
}
.nav-box{
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  justify-content: space-between;
  background-color: #f1f3f5;
  padding-left: 10px;
  padding-right: 10px;
}
.nav-left {
  text-align: left;
  padding: 10px 0px;
  font-size: 1rem;
}
.nav-right {
  align-items: center;
  display: flex;
  flex-direction: row-reverse;
  flex-wrap: wrap;
  text-align: right;
  padding: 10px 0px;
  font-size: 1rem;
  gap: 4px;
}

label {
  display:flex;
  text-align: justify;
  justify-content: center;
  justify-self: center;
}
/* BUTTON STYLING*/
.button {
	display: inline-block;
  margin: 5px 2px 5px 2px;
  padding: 0.75rem 0.75rem;
	border: 0;
	border-radius: 0.317rem;
	color: #fff;
	text-decoration: none;
	font-weight: 700;
	font-size: 1rem;
  line-height: 1.5;
	font-family: "Helvetica Neue", Arial, sans-serif;
	cursor: pointer;
	-webkit-font-smoothing: antialiased;
	background-color: #aaa;
}

.fileopen{
  border: solid #191a198a;
  background-color: #4E9F3D;
	box-shadow: inset 0 3px 4px hsla(0, 0%, 0%, 0.2);
}

.button:hover {
	opacity: 0.85;
}

.button:active {
	box-shadow: inset 0 3px 4px hsla(0, 0%, 0%, 0.2);
  outline: thin dotted #444;
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

.green {
	background-color: #4E9F3D;
}


/* CSS FOR TOGGLE BUTTONS*/
.toggle {
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
  width: 62px;
  height: 32px;
  display: inline-block;
  position: relative;
  border-radius: 50px;
  overflow: hidden;
  outline: none;
  border: none;
  cursor: pointer;
  background-color: #707070;
  transition: background-color ease 0.3s;
}

.toggle:before {
  content: "on off";
  display: block;
  position: absolute;
  z-index: 2;
  width: 28px;
  height: 28px;
  background: #fff;
  left: 2px;
  top: 2px;
  border-radius: 50%;
  font: 10px/28px Helvetica;
  text-transform: uppercase;
  font-weight: bold;
  text-indent: -22px;
  word-spacing: 37px;
  color: #fff;
  text-shadow: -1px -1px rgba(0,0,0,0.15);
  white-space: nowrap;
  box-shadow: 0 1px 2px rgba(0,0,0,0.2);
  transition: all cubic-bezier(0.3, 1.5, 0.7, 1) 0.3s;
}

.toggle:checked {
  background-color: #4E9F3D;;
}

.toggle:checked:before {
  left: 32px;
}

.disabled {
  background-color: #987171;
}
</style>